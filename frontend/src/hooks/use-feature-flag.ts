/**
 * Custom hook to retrieve the payload of a specific feature flag.
 *
 * @param flag - The name of the feature flag to fetch.
 * @returns The payload of the feature flag if found, otherwise null.
 */
import { useQueryState } from 'nuqs';

import { useGetFeatureFlags } from '@/types/generated/feature-flag';
import { FeatureFlag } from '@/types/generated/strapi.schemas';

export const useFeatureFlag = (flag: string): FeatureFlag['payload'] => {
  const [runAsOf] = useQueryState('run-as-of');

  const { data: featureFlag } = useGetFeatureFlags(
    {
      filters: {
        feature: {
          $eq: flag,
        },
      },
      // Ignoring this error because the type signiture is autogenerated and runAsOf cannot be added
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      'run-as-of': runAsOf,
      'pagination[limit]': 1,
    },
    {
      query: {
        select: (data) => {
          if (data[0]) {
            return data[0]?.attributes?.payload;
          }
          return null;
        },
        queryKey: ['featureFlag', flag, runAsOf],
        staleTime: 'static',
        refetchOnMount: false,
      },
    }
  );

  return featureFlag ?? null;
};
