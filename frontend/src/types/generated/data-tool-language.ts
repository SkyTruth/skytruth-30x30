/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  DataToolLanguageListResponse,
  Error,
  GetDataToolLanguagesParams,
  DataToolLanguageResponse,
  DataToolLanguageRequest,
  GetDataToolLanguagesIdParams,
  DataToolLanguageLocalizationResponse,
  DataToolLanguageLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getDataToolLanguages = (
  params?: GetDataToolLanguagesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataToolLanguageListResponse>(
    { url: `/data-tool-languages`, method: 'get', params, signal },
    options
  );
};

export const getGetDataToolLanguagesQueryKey = (params?: GetDataToolLanguagesParams) => {
  return [`/data-tool-languages`, ...(params ? [params] : [])] as const;
};

export const getGetDataToolLanguagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataToolLanguages>>,
  TError = ErrorType<Error>,
>(
  params?: GetDataToolLanguagesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolLanguages>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataToolLanguagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataToolLanguages>>> = ({ signal }) =>
    getDataToolLanguages(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataToolLanguages>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataToolLanguagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDataToolLanguages>>
>;
export type GetDataToolLanguagesQueryError = ErrorType<Error>;

export const useGetDataToolLanguages = <
  TData = Awaited<ReturnType<typeof getDataToolLanguages>>,
  TError = ErrorType<Error>,
>(
  params?: GetDataToolLanguagesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolLanguages>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataToolLanguagesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postDataToolLanguages = (
  dataToolLanguageRequest: BodyType<DataToolLanguageRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolLanguageResponse>(
    {
      url: `/data-tool-languages`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolLanguageRequest,
    },
    options
  );
};

export const getPostDataToolLanguagesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolLanguages>>,
    TError,
    { data: BodyType<DataToolLanguageRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDataToolLanguages>>,
  TError,
  { data: BodyType<DataToolLanguageRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDataToolLanguages>>,
    { data: BodyType<DataToolLanguageRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postDataToolLanguages(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDataToolLanguagesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDataToolLanguages>>
>;
export type PostDataToolLanguagesMutationBody = BodyType<DataToolLanguageRequest>;
export type PostDataToolLanguagesMutationError = ErrorType<Error>;

export const usePostDataToolLanguages = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolLanguages>>,
    TError,
    { data: BodyType<DataToolLanguageRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostDataToolLanguagesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getDataToolLanguagesId = (
  id: number,
  params?: GetDataToolLanguagesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataToolLanguageResponse>(
    { url: `/data-tool-languages/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetDataToolLanguagesIdQueryKey = (
  id: number,
  params?: GetDataToolLanguagesIdParams
) => {
  return [`/data-tool-languages/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetDataToolLanguagesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataToolLanguagesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetDataToolLanguagesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolLanguagesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataToolLanguagesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataToolLanguagesId>>> = ({ signal }) =>
    getDataToolLanguagesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataToolLanguagesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataToolLanguagesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDataToolLanguagesId>>
>;
export type GetDataToolLanguagesIdQueryError = ErrorType<Error>;

export const useGetDataToolLanguagesId = <
  TData = Awaited<ReturnType<typeof getDataToolLanguagesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetDataToolLanguagesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolLanguagesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataToolLanguagesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putDataToolLanguagesId = (
  id: number,
  dataToolLanguageRequest: BodyType<DataToolLanguageRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolLanguageResponse>(
    {
      url: `/data-tool-languages/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolLanguageRequest,
    },
    options
  );
};

export const getPutDataToolLanguagesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDataToolLanguagesId>>,
    TError,
    { id: number; data: BodyType<DataToolLanguageRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDataToolLanguagesId>>,
  TError,
  { id: number; data: BodyType<DataToolLanguageRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDataToolLanguagesId>>,
    { id: number; data: BodyType<DataToolLanguageRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putDataToolLanguagesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutDataToolLanguagesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDataToolLanguagesId>>
>;
export type PutDataToolLanguagesIdMutationBody = BodyType<DataToolLanguageRequest>;
export type PutDataToolLanguagesIdMutationError = ErrorType<Error>;

export const usePutDataToolLanguagesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDataToolLanguagesId>>,
    TError,
    { id: number; data: BodyType<DataToolLanguageRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutDataToolLanguagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteDataToolLanguagesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/data-tool-languages/${id}`, method: 'delete' }, options);
};

export const getDeleteDataToolLanguagesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDataToolLanguagesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDataToolLanguagesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDataToolLanguagesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDataToolLanguagesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDataToolLanguagesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDataToolLanguagesId>>
>;

export type DeleteDataToolLanguagesIdMutationError = ErrorType<Error>;

export const useDeleteDataToolLanguagesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDataToolLanguagesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteDataToolLanguagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postDataToolLanguagesIdLocalizations = (
  id: number,
  dataToolLanguageLocalizationRequest: BodyType<DataToolLanguageLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolLanguageLocalizationResponse>(
    {
      url: `/data-tool-languages/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolLanguageLocalizationRequest,
    },
    options
  );
};

export const getPostDataToolLanguagesIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolLanguagesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<DataToolLanguageLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDataToolLanguagesIdLocalizations>>,
  TError,
  { id: number; data: BodyType<DataToolLanguageLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDataToolLanguagesIdLocalizations>>,
    { id: number; data: BodyType<DataToolLanguageLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postDataToolLanguagesIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDataToolLanguagesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDataToolLanguagesIdLocalizations>>
>;
export type PostDataToolLanguagesIdLocalizationsMutationBody =
  BodyType<DataToolLanguageLocalizationRequest>;
export type PostDataToolLanguagesIdLocalizationsMutationError = ErrorType<Error>;

export const usePostDataToolLanguagesIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolLanguagesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<DataToolLanguageLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostDataToolLanguagesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
