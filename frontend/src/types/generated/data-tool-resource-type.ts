/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  DataToolResourceTypeListResponse,
  Error,
  GetDataToolResourceTypesParams,
  DataToolResourceTypeResponse,
  DataToolResourceTypeRequest,
  GetDataToolResourceTypesIdParams,
  DataToolResourceTypeLocalizationResponse,
  DataToolResourceTypeLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getDataToolResourceTypes = (
  params?: GetDataToolResourceTypesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataToolResourceTypeListResponse>(
    { url: `/data-tool-resource-types`, method: 'get', params, signal },
    options
  );
};

export const getGetDataToolResourceTypesQueryKey = (params?: GetDataToolResourceTypesParams) => {
  return [`/data-tool-resource-types`, ...(params ? [params] : [])] as const;
};

export const getGetDataToolResourceTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataToolResourceTypes>>,
  TError = ErrorType<Error>,
>(
  params?: GetDataToolResourceTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolResourceTypes>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataToolResourceTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataToolResourceTypes>>> = ({
    signal,
  }) => getDataToolResourceTypes(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataToolResourceTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataToolResourceTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDataToolResourceTypes>>
>;
export type GetDataToolResourceTypesQueryError = ErrorType<Error>;

export const useGetDataToolResourceTypes = <
  TData = Awaited<ReturnType<typeof getDataToolResourceTypes>>,
  TError = ErrorType<Error>,
>(
  params?: GetDataToolResourceTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolResourceTypes>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataToolResourceTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postDataToolResourceTypes = (
  dataToolResourceTypeRequest: BodyType<DataToolResourceTypeRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolResourceTypeResponse>(
    {
      url: `/data-tool-resource-types`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolResourceTypeRequest,
    },
    options
  );
};

export const getPostDataToolResourceTypesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolResourceTypes>>,
    TError,
    { data: BodyType<DataToolResourceTypeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDataToolResourceTypes>>,
  TError,
  { data: BodyType<DataToolResourceTypeRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDataToolResourceTypes>>,
    { data: BodyType<DataToolResourceTypeRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postDataToolResourceTypes(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDataToolResourceTypesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDataToolResourceTypes>>
>;
export type PostDataToolResourceTypesMutationBody = BodyType<DataToolResourceTypeRequest>;
export type PostDataToolResourceTypesMutationError = ErrorType<Error>;

export const usePostDataToolResourceTypes = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolResourceTypes>>,
    TError,
    { data: BodyType<DataToolResourceTypeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostDataToolResourceTypesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getDataToolResourceTypesId = (
  id: number,
  params?: GetDataToolResourceTypesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataToolResourceTypeResponse>(
    { url: `/data-tool-resource-types/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetDataToolResourceTypesIdQueryKey = (
  id: number,
  params?: GetDataToolResourceTypesIdParams
) => {
  return [`/data-tool-resource-types/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetDataToolResourceTypesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataToolResourceTypesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetDataToolResourceTypesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolResourceTypesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataToolResourceTypesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataToolResourceTypesId>>> = ({
    signal,
  }) => getDataToolResourceTypesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataToolResourceTypesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataToolResourceTypesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDataToolResourceTypesId>>
>;
export type GetDataToolResourceTypesIdQueryError = ErrorType<Error>;

export const useGetDataToolResourceTypesId = <
  TData = Awaited<ReturnType<typeof getDataToolResourceTypesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetDataToolResourceTypesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolResourceTypesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataToolResourceTypesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putDataToolResourceTypesId = (
  id: number,
  dataToolResourceTypeRequest: BodyType<DataToolResourceTypeRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolResourceTypeResponse>(
    {
      url: `/data-tool-resource-types/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolResourceTypeRequest,
    },
    options
  );
};

export const getPutDataToolResourceTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDataToolResourceTypesId>>,
    TError,
    { id: number; data: BodyType<DataToolResourceTypeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDataToolResourceTypesId>>,
  TError,
  { id: number; data: BodyType<DataToolResourceTypeRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDataToolResourceTypesId>>,
    { id: number; data: BodyType<DataToolResourceTypeRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putDataToolResourceTypesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutDataToolResourceTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDataToolResourceTypesId>>
>;
export type PutDataToolResourceTypesIdMutationBody = BodyType<DataToolResourceTypeRequest>;
export type PutDataToolResourceTypesIdMutationError = ErrorType<Error>;

export const usePutDataToolResourceTypesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDataToolResourceTypesId>>,
    TError,
    { id: number; data: BodyType<DataToolResourceTypeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutDataToolResourceTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteDataToolResourceTypesId = (
  id: number,
  options?: SecondParameter<typeof API>
) => {
  return API<number>({ url: `/data-tool-resource-types/${id}`, method: 'delete' }, options);
};

export const getDeleteDataToolResourceTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDataToolResourceTypesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDataToolResourceTypesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDataToolResourceTypesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDataToolResourceTypesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDataToolResourceTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDataToolResourceTypesId>>
>;

export type DeleteDataToolResourceTypesIdMutationError = ErrorType<Error>;

export const useDeleteDataToolResourceTypesId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDataToolResourceTypesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteDataToolResourceTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postDataToolResourceTypesIdLocalizations = (
  id: number,
  dataToolResourceTypeLocalizationRequest: BodyType<DataToolResourceTypeLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolResourceTypeLocalizationResponse>(
    {
      url: `/data-tool-resource-types/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolResourceTypeLocalizationRequest,
    },
    options
  );
};

export const getPostDataToolResourceTypesIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolResourceTypesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<DataToolResourceTypeLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDataToolResourceTypesIdLocalizations>>,
  TError,
  { id: number; data: BodyType<DataToolResourceTypeLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDataToolResourceTypesIdLocalizations>>,
    { id: number; data: BodyType<DataToolResourceTypeLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postDataToolResourceTypesIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDataToolResourceTypesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDataToolResourceTypesIdLocalizations>>
>;
export type PostDataToolResourceTypesIdLocalizationsMutationBody =
  BodyType<DataToolResourceTypeLocalizationRequest>;
export type PostDataToolResourceTypesIdLocalizationsMutationError = ErrorType<Error>;

export const usePostDataToolResourceTypesIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolResourceTypesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<DataToolResourceTypeLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostDataToolResourceTypesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
