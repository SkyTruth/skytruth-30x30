/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ProtectionStatusListResponse,
  Error,
  GetProtectionStatusesParams,
  ProtectionStatusResponse,
  GetProtectionStatusesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getProtectionStatuses = (
  params?: GetProtectionStatusesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ProtectionStatusListResponse>(
    { url: `/protection-statuses`, method: 'get', params, signal },
    options
  );
};

export const getGetProtectionStatusesQueryKey = (params?: GetProtectionStatusesParams) => {
  return [`/protection-statuses`, ...(params ? [params] : [])] as const;
};

export const getGetProtectionStatusesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProtectionStatuses>>,
  TError = ErrorType<Error>
>(
  params?: GetProtectionStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProtectionStatuses>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProtectionStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProtectionStatuses>>> = ({ signal }) =>
    getProtectionStatuses(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProtectionStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProtectionStatusesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProtectionStatuses>>
>;
export type GetProtectionStatusesQueryError = ErrorType<Error>;

export const useGetProtectionStatuses = <
  TData = Awaited<ReturnType<typeof getProtectionStatuses>>,
  TError = ErrorType<Error>
>(
  params?: GetProtectionStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProtectionStatuses>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProtectionStatusesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getProtectionStatusesId = (
  id: number,
  params?: GetProtectionStatusesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ProtectionStatusResponse>(
    { url: `/protection-statuses/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetProtectionStatusesIdQueryKey = (
  id: number,
  params?: GetProtectionStatusesIdParams
) => {
  return [`/protection-statuses/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetProtectionStatusesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProtectionStatusesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetProtectionStatusesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProtectionStatusesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProtectionStatusesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProtectionStatusesId>>> = ({
    signal,
  }) => getProtectionStatusesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProtectionStatusesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProtectionStatusesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProtectionStatusesId>>
>;
export type GetProtectionStatusesIdQueryError = ErrorType<Error>;

export const useGetProtectionStatusesId = <
  TData = Awaited<ReturnType<typeof getProtectionStatusesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetProtectionStatusesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getProtectionStatusesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProtectionStatusesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
