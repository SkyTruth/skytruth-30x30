/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  FishingProtectionLevelListResponse,
  Error,
  GetFishingProtectionLevelsParams,
  FishingProtectionLevelResponse,
  GetFishingProtectionLevelsIdParams,
  FishingProtectionLevelLocalizationResponse,
  FishingProtectionLevelLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getFishingProtectionLevels = (
  params?: GetFishingProtectionLevelsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<FishingProtectionLevelListResponse>(
    { url: `/fishing-protection-levels`, method: 'get', params, signal },
    options
  );
};

export const getGetFishingProtectionLevelsQueryKey = (
  params?: GetFishingProtectionLevelsParams
) => {
  return [`/fishing-protection-levels`, ...(params ? [params] : [])] as const;
};

export const getGetFishingProtectionLevelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevels>>,
  TError = ErrorType<Error>,
>(
  params?: GetFishingProtectionLevelsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFishingProtectionLevels>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFishingProtectionLevelsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFishingProtectionLevels>>> = ({
    signal,
  }) => getFishingProtectionLevels(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFishingProtectionLevels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFishingProtectionLevelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFishingProtectionLevels>>
>;
export type GetFishingProtectionLevelsQueryError = ErrorType<Error>;

export const useGetFishingProtectionLevels = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevels>>,
  TError = ErrorType<Error>,
>(
  params?: GetFishingProtectionLevelsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFishingProtectionLevels>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFishingProtectionLevelsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getFishingProtectionLevelsId = (
  id: number,
  params?: GetFishingProtectionLevelsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<FishingProtectionLevelResponse>(
    { url: `/fishing-protection-levels/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetFishingProtectionLevelsIdQueryKey = (
  id: number,
  params?: GetFishingProtectionLevelsIdParams
) => {
  return [`/fishing-protection-levels/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetFishingProtectionLevelsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevelsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetFishingProtectionLevelsIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFishingProtectionLevelsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFishingProtectionLevelsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFishingProtectionLevelsId>>> = ({
    signal,
  }) => getFishingProtectionLevelsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFishingProtectionLevelsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFishingProtectionLevelsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFishingProtectionLevelsId>>
>;
export type GetFishingProtectionLevelsIdQueryError = ErrorType<Error>;

export const useGetFishingProtectionLevelsId = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevelsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetFishingProtectionLevelsIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFishingProtectionLevelsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFishingProtectionLevelsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postFishingProtectionLevelsIdLocalizations = (
  id: number,
  fishingProtectionLevelLocalizationRequest: BodyType<FishingProtectionLevelLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<FishingProtectionLevelLocalizationResponse>(
    {
      url: `/fishing-protection-levels/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fishingProtectionLevelLocalizationRequest,
    },
    options
  );
};

export const getPostFishingProtectionLevelsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFishingProtectionLevelsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<FishingProtectionLevelLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFishingProtectionLevelsIdLocalizations>>,
  TError,
  { id: number; data: BodyType<FishingProtectionLevelLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFishingProtectionLevelsIdLocalizations>>,
    { id: number; data: BodyType<FishingProtectionLevelLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postFishingProtectionLevelsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFishingProtectionLevelsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFishingProtectionLevelsIdLocalizations>>
>;
export type PostFishingProtectionLevelsIdLocalizationsMutationBody =
  BodyType<FishingProtectionLevelLocalizationRequest>;
export type PostFishingProtectionLevelsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostFishingProtectionLevelsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFishingProtectionLevelsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<FishingProtectionLevelLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostFishingProtectionLevelsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
