/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ContactDetailResponse,
  Error,
  GetContactDetailParams,
  ContactDetailRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getContactDetail = (
  params?: GetContactDetailParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<ContactDetailResponse>(
    { url: `/contact-detail`, method: 'get', params, signal },
    options
  );
};

export const getGetContactDetailQueryKey = (params?: GetContactDetailParams) => {
  return [`/contact-detail`, ...(params ? [params] : [])] as const;
};

export const getGetContactDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof getContactDetail>>,
  TError = ErrorType<Error>
>(
  params?: GetContactDetailParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getContactDetail>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContactDetailQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactDetail>>> = ({ signal }) =>
    getContactDetail(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getContactDetail>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetContactDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getContactDetail>>>;
export type GetContactDetailQueryError = ErrorType<Error>;

export const useGetContactDetail = <
  TData = Awaited<ReturnType<typeof getContactDetail>>,
  TError = ErrorType<Error>
>(
  params?: GetContactDetailParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getContactDetail>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContactDetailQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putContactDetail = (
  contactDetailRequest: BodyType<ContactDetailRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<ContactDetailResponse>(
    {
      url: `/contact-detail`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: contactDetailRequest,
    },
    options
  );
};

export const getPutContactDetailMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putContactDetail>>,
    TError,
    { data: BodyType<ContactDetailRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putContactDetail>>,
  TError,
  { data: BodyType<ContactDetailRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putContactDetail>>,
    { data: BodyType<ContactDetailRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return putContactDetail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutContactDetailMutationResult = NonNullable<
  Awaited<ReturnType<typeof putContactDetail>>
>;
export type PutContactDetailMutationBody = BodyType<ContactDetailRequest>;
export type PutContactDetailMutationError = ErrorType<Error>;

export const usePutContactDetail = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putContactDetail>>,
    TError,
    { data: BodyType<ContactDetailRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutContactDetailMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteContactDetail = (options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/contact-detail`, method: 'delete' }, options);
};

export const getDeleteContactDetailMutationOptions = <
  TError = ErrorType<Error>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContactDetail>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteContactDetail>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteContactDetail>>,
    TVariables
  > = () => {
    return deleteContactDetail(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteContactDetailMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteContactDetail>>
>;

export type DeleteContactDetailMutationError = ErrorType<Error>;

export const useDeleteContactDetail = <
  TError = ErrorType<Error>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContactDetail>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteContactDetailMutationOptions(options);

  return useMutation(mutationOptions);
};
