/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  MpaaProtectionLevelListResponse,
  Error,
  GetMpaaProtectionLevelsParams,
  MpaaProtectionLevelResponse,
  GetMpaaProtectionLevelsIdParams,
  MpaaProtectionLevelLocalizationResponse,
  MpaaProtectionLevelLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getMpaaProtectionLevels = (
  params?: GetMpaaProtectionLevelsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaaProtectionLevelListResponse>(
    { url: `/mpaa-protection-levels`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaaProtectionLevelsQueryKey = (params?: GetMpaaProtectionLevelsParams) => {
  return [`/mpaa-protection-levels`, ...(params ? [params] : [])] as const;
};

export const getGetMpaaProtectionLevelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaaProtectionLevels>>,
  TError = ErrorType<Error>,
>(
  params?: GetMpaaProtectionLevelsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaaProtectionLevels>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaaProtectionLevelsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaaProtectionLevels>>> = ({
    signal,
  }) => getMpaaProtectionLevels(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaaProtectionLevels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaaProtectionLevelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaaProtectionLevels>>
>;
export type GetMpaaProtectionLevelsQueryError = ErrorType<Error>;

export const useGetMpaaProtectionLevels = <
  TData = Awaited<ReturnType<typeof getMpaaProtectionLevels>>,
  TError = ErrorType<Error>,
>(
  params?: GetMpaaProtectionLevelsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaaProtectionLevels>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaaProtectionLevelsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getMpaaProtectionLevelsId = (
  id: number,
  params?: GetMpaaProtectionLevelsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaaProtectionLevelResponse>(
    { url: `/mpaa-protection-levels/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaaProtectionLevelsIdQueryKey = (
  id: number,
  params?: GetMpaaProtectionLevelsIdParams
) => {
  return [`/mpaa-protection-levels/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetMpaaProtectionLevelsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetMpaaProtectionLevelsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaaProtectionLevelsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>> = ({
    signal,
  }) => getMpaaProtectionLevelsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaaProtectionLevelsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>
>;
export type GetMpaaProtectionLevelsIdQueryError = ErrorType<Error>;

export const useGetMpaaProtectionLevelsId = <
  TData = Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetMpaaProtectionLevelsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaaProtectionLevelsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaaProtectionLevelsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postMpaaProtectionLevelsIdLocalizations = (
  id: number,
  mpaaProtectionLevelLocalizationRequest: BodyType<MpaaProtectionLevelLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<MpaaProtectionLevelLocalizationResponse>(
    {
      url: `/mpaa-protection-levels/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: mpaaProtectionLevelLocalizationRequest,
    },
    options
  );
};

export const getPostMpaaProtectionLevelsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaaProtectionLevelsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<MpaaProtectionLevelLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMpaaProtectionLevelsIdLocalizations>>,
  TError,
  { id: number; data: BodyType<MpaaProtectionLevelLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMpaaProtectionLevelsIdLocalizations>>,
    { id: number; data: BodyType<MpaaProtectionLevelLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postMpaaProtectionLevelsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMpaaProtectionLevelsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMpaaProtectionLevelsIdLocalizations>>
>;
export type PostMpaaProtectionLevelsIdLocalizationsMutationBody =
  BodyType<MpaaProtectionLevelLocalizationRequest>;
export type PostMpaaProtectionLevelsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostMpaaProtectionLevelsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaaProtectionLevelsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<MpaaProtectionLevelLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostMpaaProtectionLevelsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
