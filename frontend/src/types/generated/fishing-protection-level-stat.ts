/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  FishingProtectionLevelStatListResponse,
  Error,
  GetFishingProtectionLevelStatsParams,
  FishingProtectionLevelStatResponse,
  FishingProtectionLevelStatRequest,
  GetFishingProtectionLevelStatsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getFishingProtectionLevelStats = (
  params?: GetFishingProtectionLevelStatsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<FishingProtectionLevelStatListResponse>(
    { url: `/fishing-protection-level-stats`, method: 'get', params, signal },
    options
  );
};

export const getGetFishingProtectionLevelStatsQueryKey = (
  params?: GetFishingProtectionLevelStatsParams
) => {
  return [`/fishing-protection-level-stats`, ...(params ? [params] : [])] as const;
};

export const getGetFishingProtectionLevelStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevelStats>>,
  TError = ErrorType<Error>,
>(
  params?: GetFishingProtectionLevelStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFishingProtectionLevelStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFishingProtectionLevelStatsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFishingProtectionLevelStats>>> = ({
    signal,
  }) => getFishingProtectionLevelStats(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFishingProtectionLevelStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFishingProtectionLevelStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFishingProtectionLevelStats>>
>;
export type GetFishingProtectionLevelStatsQueryError = ErrorType<Error>;

export const useGetFishingProtectionLevelStats = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevelStats>>,
  TError = ErrorType<Error>,
>(
  params?: GetFishingProtectionLevelStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFishingProtectionLevelStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFishingProtectionLevelStatsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postFishingProtectionLevelStats = (
  fishingProtectionLevelStatRequest: BodyType<FishingProtectionLevelStatRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<FishingProtectionLevelStatResponse>(
    {
      url: `/fishing-protection-level-stats`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fishingProtectionLevelStatRequest,
    },
    options
  );
};

export const getPostFishingProtectionLevelStatsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFishingProtectionLevelStats>>,
    TError,
    { data: BodyType<FishingProtectionLevelStatRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFishingProtectionLevelStats>>,
  TError,
  { data: BodyType<FishingProtectionLevelStatRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFishingProtectionLevelStats>>,
    { data: BodyType<FishingProtectionLevelStatRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postFishingProtectionLevelStats(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFishingProtectionLevelStatsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFishingProtectionLevelStats>>
>;
export type PostFishingProtectionLevelStatsMutationBody =
  BodyType<FishingProtectionLevelStatRequest>;
export type PostFishingProtectionLevelStatsMutationError = ErrorType<Error>;

export const usePostFishingProtectionLevelStats = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFishingProtectionLevelStats>>,
    TError,
    { data: BodyType<FishingProtectionLevelStatRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostFishingProtectionLevelStatsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getFishingProtectionLevelStatsId = (
  id: number,
  params?: GetFishingProtectionLevelStatsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<FishingProtectionLevelStatResponse>(
    { url: `/fishing-protection-level-stats/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetFishingProtectionLevelStatsIdQueryKey = (
  id: number,
  params?: GetFishingProtectionLevelStatsIdParams
) => {
  return [`/fishing-protection-level-stats/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetFishingProtectionLevelStatsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetFishingProtectionLevelStatsIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFishingProtectionLevelStatsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>> = ({
    signal,
  }) => getFishingProtectionLevelStatsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFishingProtectionLevelStatsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>
>;
export type GetFishingProtectionLevelStatsIdQueryError = ErrorType<Error>;

export const useGetFishingProtectionLevelStatsId = <
  TData = Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetFishingProtectionLevelStatsIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFishingProtectionLevelStatsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFishingProtectionLevelStatsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putFishingProtectionLevelStatsId = (
  id: number,
  fishingProtectionLevelStatRequest: BodyType<FishingProtectionLevelStatRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<FishingProtectionLevelStatResponse>(
    {
      url: `/fishing-protection-level-stats/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: fishingProtectionLevelStatRequest,
    },
    options
  );
};

export const getPutFishingProtectionLevelStatsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putFishingProtectionLevelStatsId>>,
    TError,
    { id: number; data: BodyType<FishingProtectionLevelStatRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putFishingProtectionLevelStatsId>>,
  TError,
  { id: number; data: BodyType<FishingProtectionLevelStatRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putFishingProtectionLevelStatsId>>,
    { id: number; data: BodyType<FishingProtectionLevelStatRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putFishingProtectionLevelStatsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutFishingProtectionLevelStatsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putFishingProtectionLevelStatsId>>
>;
export type PutFishingProtectionLevelStatsIdMutationBody =
  BodyType<FishingProtectionLevelStatRequest>;
export type PutFishingProtectionLevelStatsIdMutationError = ErrorType<Error>;

export const usePutFishingProtectionLevelStatsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putFishingProtectionLevelStatsId>>,
    TError,
    { id: number; data: BodyType<FishingProtectionLevelStatRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutFishingProtectionLevelStatsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
