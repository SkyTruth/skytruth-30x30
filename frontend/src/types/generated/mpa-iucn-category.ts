/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  MpaIucnCategoryListResponse,
  Error,
  GetMpaIucnCategoriesParams,
  MpaIucnCategoryResponse,
  MpaIucnCategoryRequest,
  GetMpaIucnCategoriesIdParams,
  MpaIucnCategoryLocalizationResponse,
  MpaIucnCategoryLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getMpaIucnCategories = (
  params?: GetMpaIucnCategoriesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaIucnCategoryListResponse>(
    { url: `/mpa-iucn-categories`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaIucnCategoriesQueryKey = (params?: GetMpaIucnCategoriesParams) => {
  return [`/mpa-iucn-categories`, ...(params ? [params] : [])] as const;
};

export const getGetMpaIucnCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaIucnCategories>>,
  TError = ErrorType<Error>
>(
  params?: GetMpaIucnCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaIucnCategories>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaIucnCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaIucnCategories>>> = ({ signal }) =>
    getMpaIucnCategories(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaIucnCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaIucnCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaIucnCategories>>
>;
export type GetMpaIucnCategoriesQueryError = ErrorType<Error>;

export const useGetMpaIucnCategories = <
  TData = Awaited<ReturnType<typeof getMpaIucnCategories>>,
  TError = ErrorType<Error>
>(
  params?: GetMpaIucnCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaIucnCategories>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaIucnCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postMpaIucnCategories = (
  mpaIucnCategoryRequest: BodyType<MpaIucnCategoryRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<MpaIucnCategoryResponse>(
    {
      url: `/mpa-iucn-categories`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: mpaIucnCategoryRequest,
    },
    options
  );
};

export const getPostMpaIucnCategoriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaIucnCategories>>,
    TError,
    { data: BodyType<MpaIucnCategoryRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMpaIucnCategories>>,
  TError,
  { data: BodyType<MpaIucnCategoryRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMpaIucnCategories>>,
    { data: BodyType<MpaIucnCategoryRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postMpaIucnCategories(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMpaIucnCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMpaIucnCategories>>
>;
export type PostMpaIucnCategoriesMutationBody = BodyType<MpaIucnCategoryRequest>;
export type PostMpaIucnCategoriesMutationError = ErrorType<Error>;

export const usePostMpaIucnCategories = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaIucnCategories>>,
    TError,
    { data: BodyType<MpaIucnCategoryRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostMpaIucnCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getMpaIucnCategoriesId = (
  id: number,
  params?: GetMpaIucnCategoriesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaIucnCategoryResponse>(
    { url: `/mpa-iucn-categories/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaIucnCategoriesIdQueryKey = (
  id: number,
  params?: GetMpaIucnCategoriesIdParams
) => {
  return [`/mpa-iucn-categories/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetMpaIucnCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaIucnCategoriesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetMpaIucnCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaIucnCategoriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaIucnCategoriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaIucnCategoriesId>>> = ({ signal }) =>
    getMpaIucnCategoriesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaIucnCategoriesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaIucnCategoriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaIucnCategoriesId>>
>;
export type GetMpaIucnCategoriesIdQueryError = ErrorType<Error>;

export const useGetMpaIucnCategoriesId = <
  TData = Awaited<ReturnType<typeof getMpaIucnCategoriesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetMpaIucnCategoriesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaIucnCategoriesId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaIucnCategoriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putMpaIucnCategoriesId = (
  id: number,
  mpaIucnCategoryRequest: BodyType<MpaIucnCategoryRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<MpaIucnCategoryResponse>(
    {
      url: `/mpa-iucn-categories/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: mpaIucnCategoryRequest,
    },
    options
  );
};

export const getPutMpaIucnCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMpaIucnCategoriesId>>,
    TError,
    { id: number; data: BodyType<MpaIucnCategoryRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMpaIucnCategoriesId>>,
  TError,
  { id: number; data: BodyType<MpaIucnCategoryRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMpaIucnCategoriesId>>,
    { id: number; data: BodyType<MpaIucnCategoryRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putMpaIucnCategoriesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutMpaIucnCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putMpaIucnCategoriesId>>
>;
export type PutMpaIucnCategoriesIdMutationBody = BodyType<MpaIucnCategoryRequest>;
export type PutMpaIucnCategoriesIdMutationError = ErrorType<Error>;

export const usePutMpaIucnCategoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMpaIucnCategoriesId>>,
    TError,
    { id: number; data: BodyType<MpaIucnCategoryRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutMpaIucnCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteMpaIucnCategoriesId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/mpa-iucn-categories/${id}`, method: 'delete' }, options);
};

export const getDeleteMpaIucnCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMpaIucnCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMpaIucnCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMpaIucnCategoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteMpaIucnCategoriesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMpaIucnCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMpaIucnCategoriesId>>
>;

export type DeleteMpaIucnCategoriesIdMutationError = ErrorType<Error>;

export const useDeleteMpaIucnCategoriesId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMpaIucnCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteMpaIucnCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postMpaIucnCategoriesIdLocalizations = (
  id: number,
  mpaIucnCategoryLocalizationRequest: BodyType<MpaIucnCategoryLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<MpaIucnCategoryLocalizationResponse>(
    {
      url: `/mpa-iucn-categories/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: mpaIucnCategoryLocalizationRequest,
    },
    options
  );
};

export const getPostMpaIucnCategoriesIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaIucnCategoriesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<MpaIucnCategoryLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMpaIucnCategoriesIdLocalizations>>,
  TError,
  { id: number; data: BodyType<MpaIucnCategoryLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMpaIucnCategoriesIdLocalizations>>,
    { id: number; data: BodyType<MpaIucnCategoryLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postMpaIucnCategoriesIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMpaIucnCategoriesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMpaIucnCategoriesIdLocalizations>>
>;
export type PostMpaIucnCategoriesIdLocalizationsMutationBody =
  BodyType<MpaIucnCategoryLocalizationRequest>;
export type PostMpaIucnCategoriesIdLocalizationsMutationError = ErrorType<Error>;

export const usePostMpaIucnCategoriesIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaIucnCategoriesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<MpaIucnCategoryLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostMpaIucnCategoriesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
