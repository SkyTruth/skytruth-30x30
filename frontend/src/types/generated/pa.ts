/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  PaListResponse,
  Error,
  GetPasParams,
  PaResponse,
  PaRequest,
  GetPasIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getPas = (
  params?: GetPasParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<PaListResponse>({ url: `/pas`, method: 'get', params, signal }, options);
};

export const getGetPasQueryKey = (params?: GetPasParams) => {
  return [`/pas`, ...(params ? [params] : [])] as const;
};

export const getGetPasQueryOptions = <
  TData = Awaited<ReturnType<typeof getPas>>,
  TError = ErrorType<Error>,
>(
  params?: GetPasParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPas>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPasQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPas>>> = ({ signal }) =>
    getPas(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPas>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPasQueryResult = NonNullable<Awaited<ReturnType<typeof getPas>>>;
export type GetPasQueryError = ErrorType<Error>;

export const useGetPas = <TData = Awaited<ReturnType<typeof getPas>>, TError = ErrorType<Error>>(
  params?: GetPasParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPas>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPasQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postPas = (paRequest: BodyType<PaRequest>, options?: SecondParameter<typeof API>) => {
  return API<PaResponse>(
    {
      url: `/pas`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: paRequest,
    },
    options
  );
};

export const getPostPasMutationOptions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPas>>,
    TError,
    { data: BodyType<PaRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPas>>,
  TError,
  { data: BodyType<PaRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPas>>,
    { data: BodyType<PaRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postPas(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPasMutationResult = NonNullable<Awaited<ReturnType<typeof postPas>>>;
export type PostPasMutationBody = BodyType<PaRequest>;
export type PostPasMutationError = ErrorType<Error>;

export const usePostPas = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPas>>,
    TError,
    { data: BodyType<PaRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostPasMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getPasId = (
  id: number,
  params?: GetPasIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<PaResponse>({ url: `/pas/${id}`, method: 'get', params, signal }, options);
};

export const getGetPasIdQueryKey = (id: number, params?: GetPasIdParams) => {
  return [`/pas/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetPasIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPasId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPasIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPasId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPasIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPasId>>> = ({ signal }) =>
    getPasId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPasId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPasIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPasId>>>;
export type GetPasIdQueryError = ErrorType<Error>;

export const useGetPasId = <
  TData = Awaited<ReturnType<typeof getPasId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPasIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPasId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPasIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putPasId = (
  id: number,
  paRequest: BodyType<PaRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<PaResponse>(
    {
      url: `/pas/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: paRequest,
    },
    options
  );
};

export const getPutPasIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPasId>>,
    TError,
    { id: number; data: BodyType<PaRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putPasId>>,
  TError,
  { id: number; data: BodyType<PaRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putPasId>>,
    { id: number; data: BodyType<PaRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putPasId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutPasIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPasId>>>;
export type PutPasIdMutationBody = BodyType<PaRequest>;
export type PutPasIdMutationError = ErrorType<Error>;

export const usePutPasId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPasId>>,
    TError,
    { id: number; data: BodyType<PaRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutPasIdMutationOptions(options);

  return useMutation(mutationOptions);
};
