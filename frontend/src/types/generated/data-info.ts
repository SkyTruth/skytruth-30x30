/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  DataInfoListResponse,
  Error,
  GetDataInfosParams,
  DataInfoResponse,
  GetDataInfosIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getDataInfos = (
  params?: GetDataInfosParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataInfoListResponse>({ url: `/data-infos`, method: 'get', params, signal }, options);
};

export const getGetDataInfosQueryKey = (params?: GetDataInfosParams) => {
  return [`/data-infos`, ...(params ? [params] : [])] as const;
};

export const getGetDataInfosQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataInfos>>,
  TError = ErrorType<Error>
>(
  params?: GetDataInfosParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataInfos>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataInfosQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataInfos>>> = ({ signal }) =>
    getDataInfos(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataInfos>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataInfosQueryResult = NonNullable<Awaited<ReturnType<typeof getDataInfos>>>;
export type GetDataInfosQueryError = ErrorType<Error>;

export const useGetDataInfos = <
  TData = Awaited<ReturnType<typeof getDataInfos>>,
  TError = ErrorType<Error>
>(
  params?: GetDataInfosParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataInfos>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataInfosQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getDataInfosId = (
  id: number,
  params?: GetDataInfosIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataInfoResponse>(
    { url: `/data-infos/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetDataInfosIdQueryKey = (id: number, params?: GetDataInfosIdParams) => {
  return [`/data-infos/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetDataInfosIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataInfosId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetDataInfosIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataInfosId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataInfosIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataInfosId>>> = ({ signal }) =>
    getDataInfosId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataInfosId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataInfosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDataInfosId>>>;
export type GetDataInfosIdQueryError = ErrorType<Error>;

export const useGetDataInfosId = <
  TData = Awaited<ReturnType<typeof getDataInfosId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetDataInfosIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataInfosId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataInfosIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
