/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  MpaaEstablishmentStageStatListResponse,
  Error,
  GetMpaaEstablishmentStageStatsParams,
  MpaaEstablishmentStageStatResponse,
  GetMpaaEstablishmentStageStatsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getMpaaEstablishmentStageStats = (
  params?: GetMpaaEstablishmentStageStatsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaaEstablishmentStageStatListResponse>(
    { url: `/mpaa-establishment-stage-stats`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaaEstablishmentStageStatsQueryKey = (
  params?: GetMpaaEstablishmentStageStatsParams
) => {
  return [`/mpaa-establishment-stage-stats`, ...(params ? [params] : [])] as const;
};

export const getGetMpaaEstablishmentStageStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>,
  TError = ErrorType<Error>
>(
  params?: GetMpaaEstablishmentStageStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaaEstablishmentStageStatsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>> = ({
    signal,
  }) => getMpaaEstablishmentStageStats(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaaEstablishmentStageStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>
>;
export type GetMpaaEstablishmentStageStatsQueryError = ErrorType<Error>;

export const useGetMpaaEstablishmentStageStats = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>,
  TError = ErrorType<Error>
>(
  params?: GetMpaaEstablishmentStageStatsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMpaaEstablishmentStageStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaaEstablishmentStageStatsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getMpaaEstablishmentStageStatsId = (
  id: number,
  params?: GetMpaaEstablishmentStageStatsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaaEstablishmentStageStatResponse>(
    { url: `/mpaa-establishment-stage-stats/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaaEstablishmentStageStatsIdQueryKey = (
  id: number,
  params?: GetMpaaEstablishmentStageStatsIdParams
) => {
  return [`/mpaa-establishment-stage-stats/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetMpaaEstablishmentStageStatsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetMpaaEstablishmentStageStatsIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMpaaEstablishmentStageStatsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>> = ({
    signal,
  }) => getMpaaEstablishmentStageStatsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaaEstablishmentStageStatsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>
>;
export type GetMpaaEstablishmentStageStatsIdQueryError = ErrorType<Error>;

export const useGetMpaaEstablishmentStageStatsId = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetMpaaEstablishmentStageStatsIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMpaaEstablishmentStageStatsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaaEstablishmentStageStatsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
