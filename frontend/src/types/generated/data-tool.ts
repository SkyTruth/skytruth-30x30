/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  DataToolListResponse,
  Error,
  GetDataToolsParams,
  DataToolResponse,
  DataToolRequest,
  GetDataToolsIdParams,
  DataToolLocalizationResponse,
  DataToolLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getDataTools = (
  params?: GetDataToolsParams,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolListResponse>({ url: `/data-tools`, method: 'get', params }, options);
};

export const getGetDataToolsQueryKey = (params?: GetDataToolsParams) => {
  return [`/data-tools`, ...(params ? [params] : [])] as const;
};

export const getGetDataToolsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataTools>>,
  TError = ErrorType<Error>,
>(
  params?: GetDataToolsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDataTools>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataToolsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataTools>>> = ({ pageParam }) =>
    getDataTools({ 'pagination[page]': pageParam, ...params }, requestOptions);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDataTools>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataToolsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getDataTools>>>;
export type GetDataToolsInfiniteQueryError = ErrorType<Error>;

export const useGetDataToolsInfinite = <
  TData = Awaited<ReturnType<typeof getDataTools>>,
  TError = ErrorType<Error>,
>(
  params?: GetDataToolsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDataTools>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataToolsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postDataTools = (
  dataToolRequest: BodyType<DataToolRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolResponse>(
    {
      url: `/data-tools`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolRequest,
    },
    options
  );
};

export const getPostDataToolsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataTools>>,
    TError,
    { data: BodyType<DataToolRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDataTools>>,
  TError,
  { data: BodyType<DataToolRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDataTools>>,
    { data: BodyType<DataToolRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postDataTools(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDataToolsMutationResult = NonNullable<Awaited<ReturnType<typeof postDataTools>>>;
export type PostDataToolsMutationBody = BodyType<DataToolRequest>;
export type PostDataToolsMutationError = ErrorType<Error>;

export const usePostDataTools = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataTools>>,
    TError,
    { data: BodyType<DataToolRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostDataToolsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getDataToolsId = (
  id: number,
  params?: GetDataToolsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<DataToolResponse>(
    { url: `/data-tools/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetDataToolsIdQueryKey = (id: number, params?: GetDataToolsIdParams) => {
  return [`/data-tools/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetDataToolsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataToolsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetDataToolsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDataToolsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataToolsId>>> = ({ signal }) =>
    getDataToolsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataToolsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDataToolsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDataToolsId>>>;
export type GetDataToolsIdQueryError = ErrorType<Error>;

export const useGetDataToolsId = <
  TData = Awaited<ReturnType<typeof getDataToolsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetDataToolsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDataToolsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataToolsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putDataToolsId = (
  id: number,
  dataToolRequest: BodyType<DataToolRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolResponse>(
    {
      url: `/data-tools/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolRequest,
    },
    options
  );
};

export const getPutDataToolsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDataToolsId>>,
    TError,
    { id: number; data: BodyType<DataToolRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDataToolsId>>,
  TError,
  { id: number; data: BodyType<DataToolRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDataToolsId>>,
    { id: number; data: BodyType<DataToolRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putDataToolsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutDataToolsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDataToolsId>>>;
export type PutDataToolsIdMutationBody = BodyType<DataToolRequest>;
export type PutDataToolsIdMutationError = ErrorType<Error>;

export const usePutDataToolsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDataToolsId>>,
    TError,
    { id: number; data: BodyType<DataToolRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutDataToolsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteDataToolsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/data-tools/${id}`, method: 'delete' }, options);
};

export const getDeleteDataToolsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDataToolsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDataToolsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDataToolsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDataToolsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDataToolsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDataToolsId>>
>;

export type DeleteDataToolsIdMutationError = ErrorType<Error>;

export const useDeleteDataToolsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDataToolsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteDataToolsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postDataToolsIdLocalizations = (
  id: number,
  dataToolLocalizationRequest: BodyType<DataToolLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<DataToolLocalizationResponse>(
    {
      url: `/data-tools/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dataToolLocalizationRequest,
    },
    options
  );
};

export const getPostDataToolsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<DataToolLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDataToolsIdLocalizations>>,
  TError,
  { id: number; data: BodyType<DataToolLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDataToolsIdLocalizations>>,
    { id: number; data: BodyType<DataToolLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postDataToolsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDataToolsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDataToolsIdLocalizations>>
>;
export type PostDataToolsIdLocalizationsMutationBody = BodyType<DataToolLocalizationRequest>;
export type PostDataToolsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostDataToolsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDataToolsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<DataToolLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostDataToolsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
