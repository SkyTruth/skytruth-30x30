/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  HabitatListResponse,
  Error,
  GetHabitatsParams,
  HabitatResponse,
  GetHabitatsIdParams,
  HabitatLocalizationResponse,
  HabitatLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getHabitats = (
  params?: GetHabitatsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<HabitatListResponse>({ url: `/habitats`, method: 'get', params, signal }, options);
};

export const getGetHabitatsQueryKey = (params?: GetHabitatsParams) => {
  return [`/habitats`, ...(params ? [params] : [])] as const;
};

export const getGetHabitatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getHabitats>>,
  TError = ErrorType<Error>,
>(
  params?: GetHabitatsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getHabitats>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHabitatsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHabitats>>> = ({ signal }) =>
    getHabitats(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHabitats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetHabitatsQueryResult = NonNullable<Awaited<ReturnType<typeof getHabitats>>>;
export type GetHabitatsQueryError = ErrorType<Error>;

export const useGetHabitats = <
  TData = Awaited<ReturnType<typeof getHabitats>>,
  TError = ErrorType<Error>,
>(
  params?: GetHabitatsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getHabitats>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetHabitatsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getHabitatsId = (
  id: number,
  params?: GetHabitatsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<HabitatResponse>({ url: `/habitats/${id}`, method: 'get', params, signal }, options);
};

export const getGetHabitatsIdQueryKey = (id: number, params?: GetHabitatsIdParams) => {
  return [`/habitats/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetHabitatsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHabitatsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetHabitatsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getHabitatsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHabitatsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHabitatsId>>> = ({ signal }) =>
    getHabitatsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHabitatsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetHabitatsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHabitatsId>>>;
export type GetHabitatsIdQueryError = ErrorType<Error>;

export const useGetHabitatsId = <
  TData = Awaited<ReturnType<typeof getHabitatsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetHabitatsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getHabitatsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetHabitatsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postHabitatsIdLocalizations = (
  id: number,
  habitatLocalizationRequest: BodyType<HabitatLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<HabitatLocalizationResponse>(
    {
      url: `/habitats/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: habitatLocalizationRequest,
    },
    options
  );
};

export const getPostHabitatsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHabitatsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<HabitatLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postHabitatsIdLocalizations>>,
  TError,
  { id: number; data: BodyType<HabitatLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postHabitatsIdLocalizations>>,
    { id: number; data: BodyType<HabitatLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postHabitatsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostHabitatsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postHabitatsIdLocalizations>>
>;
export type PostHabitatsIdLocalizationsMutationBody = BodyType<HabitatLocalizationRequest>;
export type PostHabitatsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostHabitatsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHabitatsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<HabitatLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostHabitatsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
