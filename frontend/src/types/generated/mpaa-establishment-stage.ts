/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  MpaaEstablishmentStageListResponse,
  Error,
  GetMpaaEstablishmentStagesParams,
  MpaaEstablishmentStageResponse,
  GetMpaaEstablishmentStagesIdParams,
  MpaaEstablishmentStageLocalizationResponse,
  MpaaEstablishmentStageLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getMpaaEstablishmentStages = (
  params?: GetMpaaEstablishmentStagesParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaaEstablishmentStageListResponse>(
    { url: `/mpaa-establishment-stages`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaaEstablishmentStagesQueryKey = (
  params?: GetMpaaEstablishmentStagesParams
) => {
  return [`/mpaa-establishment-stages`, ...(params ? [params] : [])] as const;
};

export const getGetMpaaEstablishmentStagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStages>>,
  TError = ErrorType<Error>
>(
  params?: GetMpaaEstablishmentStagesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaaEstablishmentStages>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaaEstablishmentStagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaaEstablishmentStages>>> = ({
    signal,
  }) => getMpaaEstablishmentStages(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaaEstablishmentStages>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaaEstablishmentStagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaaEstablishmentStages>>
>;
export type GetMpaaEstablishmentStagesQueryError = ErrorType<Error>;

export const useGetMpaaEstablishmentStages = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStages>>,
  TError = ErrorType<Error>
>(
  params?: GetMpaaEstablishmentStagesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMpaaEstablishmentStages>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaaEstablishmentStagesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getMpaaEstablishmentStagesId = (
  id: number,
  params?: GetMpaaEstablishmentStagesIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<MpaaEstablishmentStageResponse>(
    { url: `/mpaa-establishment-stages/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetMpaaEstablishmentStagesIdQueryKey = (
  id: number,
  params?: GetMpaaEstablishmentStagesIdParams
) => {
  return [`/mpaa-establishment-stages/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetMpaaEstablishmentStagesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetMpaaEstablishmentStagesIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMpaaEstablishmentStagesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>> = ({
    signal,
  }) => getMpaaEstablishmentStagesId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMpaaEstablishmentStagesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>
>;
export type GetMpaaEstablishmentStagesIdQueryError = ErrorType<Error>;

export const useGetMpaaEstablishmentStagesId = <
  TData = Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetMpaaEstablishmentStagesIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMpaaEstablishmentStagesId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMpaaEstablishmentStagesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postMpaaEstablishmentStagesIdLocalizations = (
  id: number,
  mpaaEstablishmentStageLocalizationRequest: BodyType<MpaaEstablishmentStageLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<MpaaEstablishmentStageLocalizationResponse>(
    {
      url: `/mpaa-establishment-stages/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: mpaaEstablishmentStageLocalizationRequest,
    },
    options
  );
};

export const getPostMpaaEstablishmentStagesIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaaEstablishmentStagesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<MpaaEstablishmentStageLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMpaaEstablishmentStagesIdLocalizations>>,
  TError,
  { id: number; data: BodyType<MpaaEstablishmentStageLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMpaaEstablishmentStagesIdLocalizations>>,
    { id: number; data: BodyType<MpaaEstablishmentStageLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postMpaaEstablishmentStagesIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMpaaEstablishmentStagesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMpaaEstablishmentStagesIdLocalizations>>
>;
export type PostMpaaEstablishmentStagesIdLocalizationsMutationBody =
  BodyType<MpaaEstablishmentStageLocalizationRequest>;
export type PostMpaaEstablishmentStagesIdLocalizationsMutationError = ErrorType<Error>;

export const usePostMpaaEstablishmentStagesIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMpaaEstablishmentStagesIdLocalizations>>,
    TError,
    { id: number; data: BodyType<MpaaEstablishmentStageLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostMpaaEstablishmentStagesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
