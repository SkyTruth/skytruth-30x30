/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  StaticIndicatorListResponse,
  Error,
  GetStaticIndicatorsParams,
  StaticIndicatorResponse,
  StaticIndicatorRequest,
  GetStaticIndicatorsIdParams,
  StaticIndicatorLocalizationResponse,
  StaticIndicatorLocalizationRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getStaticIndicators = (
  params?: GetStaticIndicatorsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<StaticIndicatorListResponse>(
    { url: `/static-indicators`, method: 'get', params, signal },
    options
  );
};

export const getGetStaticIndicatorsQueryKey = (params?: GetStaticIndicatorsParams) => {
  return [`/static-indicators`, ...(params ? [params] : [])] as const;
};

export const getGetStaticIndicatorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getStaticIndicators>>,
  TError = ErrorType<Error>
>(
  params?: GetStaticIndicatorsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getStaticIndicators>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStaticIndicatorsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStaticIndicators>>> = ({ signal }) =>
    getStaticIndicators(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStaticIndicators>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStaticIndicatorsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStaticIndicators>>
>;
export type GetStaticIndicatorsQueryError = ErrorType<Error>;

export const useGetStaticIndicators = <
  TData = Awaited<ReturnType<typeof getStaticIndicators>>,
  TError = ErrorType<Error>
>(
  params?: GetStaticIndicatorsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getStaticIndicators>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStaticIndicatorsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postStaticIndicators = (
  staticIndicatorRequest: BodyType<StaticIndicatorRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<StaticIndicatorResponse>(
    {
      url: `/static-indicators`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: staticIndicatorRequest,
    },
    options
  );
};

export const getPostStaticIndicatorsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postStaticIndicators>>,
    TError,
    { data: BodyType<StaticIndicatorRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postStaticIndicators>>,
  TError,
  { data: BodyType<StaticIndicatorRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postStaticIndicators>>,
    { data: BodyType<StaticIndicatorRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postStaticIndicators(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostStaticIndicatorsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postStaticIndicators>>
>;
export type PostStaticIndicatorsMutationBody = BodyType<StaticIndicatorRequest>;
export type PostStaticIndicatorsMutationError = ErrorType<Error>;

export const usePostStaticIndicators = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postStaticIndicators>>,
    TError,
    { data: BodyType<StaticIndicatorRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostStaticIndicatorsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getStaticIndicatorsId = (
  id: number,
  params?: GetStaticIndicatorsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<StaticIndicatorResponse>(
    { url: `/static-indicators/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetStaticIndicatorsIdQueryKey = (
  id: number,
  params?: GetStaticIndicatorsIdParams
) => {
  return [`/static-indicators/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetStaticIndicatorsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getStaticIndicatorsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetStaticIndicatorsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getStaticIndicatorsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStaticIndicatorsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStaticIndicatorsId>>> = ({ signal }) =>
    getStaticIndicatorsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStaticIndicatorsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStaticIndicatorsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStaticIndicatorsId>>
>;
export type GetStaticIndicatorsIdQueryError = ErrorType<Error>;

export const useGetStaticIndicatorsId = <
  TData = Awaited<ReturnType<typeof getStaticIndicatorsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetStaticIndicatorsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getStaticIndicatorsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStaticIndicatorsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putStaticIndicatorsId = (
  id: number,
  staticIndicatorRequest: BodyType<StaticIndicatorRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<StaticIndicatorResponse>(
    {
      url: `/static-indicators/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: staticIndicatorRequest,
    },
    options
  );
};

export const getPutStaticIndicatorsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putStaticIndicatorsId>>,
    TError,
    { id: number; data: BodyType<StaticIndicatorRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putStaticIndicatorsId>>,
  TError,
  { id: number; data: BodyType<StaticIndicatorRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putStaticIndicatorsId>>,
    { id: number; data: BodyType<StaticIndicatorRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putStaticIndicatorsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutStaticIndicatorsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putStaticIndicatorsId>>
>;
export type PutStaticIndicatorsIdMutationBody = BodyType<StaticIndicatorRequest>;
export type PutStaticIndicatorsIdMutationError = ErrorType<Error>;

export const usePutStaticIndicatorsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putStaticIndicatorsId>>,
    TError,
    { id: number; data: BodyType<StaticIndicatorRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutStaticIndicatorsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteStaticIndicatorsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/static-indicators/${id}`, method: 'delete' }, options);
};

export const getDeleteStaticIndicatorsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStaticIndicatorsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteStaticIndicatorsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteStaticIndicatorsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteStaticIndicatorsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteStaticIndicatorsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteStaticIndicatorsId>>
>;

export type DeleteStaticIndicatorsIdMutationError = ErrorType<Error>;

export const useDeleteStaticIndicatorsId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStaticIndicatorsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteStaticIndicatorsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postStaticIndicatorsIdLocalizations = (
  id: number,
  staticIndicatorLocalizationRequest: BodyType<StaticIndicatorLocalizationRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<StaticIndicatorLocalizationResponse>(
    {
      url: `/static-indicators/${id}/localizations`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: staticIndicatorLocalizationRequest,
    },
    options
  );
};

export const getPostStaticIndicatorsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postStaticIndicatorsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<StaticIndicatorLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postStaticIndicatorsIdLocalizations>>,
  TError,
  { id: number; data: BodyType<StaticIndicatorLocalizationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postStaticIndicatorsIdLocalizations>>,
    { id: number; data: BodyType<StaticIndicatorLocalizationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return postStaticIndicatorsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostStaticIndicatorsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postStaticIndicatorsIdLocalizations>>
>;
export type PostStaticIndicatorsIdLocalizationsMutationBody =
  BodyType<StaticIndicatorLocalizationRequest>;
export type PostStaticIndicatorsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostStaticIndicatorsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postStaticIndicatorsIdLocalizations>>,
    TError,
    { id: number; data: BodyType<StaticIndicatorLocalizationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostStaticIndicatorsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
