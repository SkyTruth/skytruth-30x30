/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  FeatureFlagListResponse,
  Error,
  GetFeatureFlagsParams,
  FeatureFlagResponse,
  FeatureFlagRequest,
  GetFeatureFlagsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType, BodyType } from '../../services/api/index';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getFeatureFlags = (
  params?: GetFeatureFlagsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<FeatureFlagListResponse>(
    { url: `/feature-flags`, method: 'get', params, signal },
    options
  );
};

export const getGetFeatureFlagsQueryKey = (params?: GetFeatureFlagsParams) => {
  return [`/feature-flags`, ...(params ? [params] : [])] as const;
};

export const getGetFeatureFlagsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFeatureFlags>>,
  TError = ErrorType<Error>,
>(
  params?: GetFeatureFlagsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFeatureFlags>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFeatureFlagsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeatureFlags>>> = ({ signal }) =>
    getFeatureFlags(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFeatureFlags>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFeatureFlagsQueryResult = NonNullable<Awaited<ReturnType<typeof getFeatureFlags>>>;
export type GetFeatureFlagsQueryError = ErrorType<Error>;

export const useGetFeatureFlags = <
  TData = Awaited<ReturnType<typeof getFeatureFlags>>,
  TError = ErrorType<Error>,
>(
  params?: GetFeatureFlagsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFeatureFlags>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFeatureFlagsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postFeatureFlags = (
  featureFlagRequest: BodyType<FeatureFlagRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<FeatureFlagResponse>(
    {
      url: `/feature-flags`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: featureFlagRequest,
    },
    options
  );
};

export const getPostFeatureFlagsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFeatureFlags>>,
    TError,
    { data: BodyType<FeatureFlagRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFeatureFlags>>,
  TError,
  { data: BodyType<FeatureFlagRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFeatureFlags>>,
    { data: BodyType<FeatureFlagRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postFeatureFlags(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFeatureFlagsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFeatureFlags>>
>;
export type PostFeatureFlagsMutationBody = BodyType<FeatureFlagRequest>;
export type PostFeatureFlagsMutationError = ErrorType<Error>;

export const usePostFeatureFlags = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFeatureFlags>>,
    TError,
    { data: BodyType<FeatureFlagRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPostFeatureFlagsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getFeatureFlagsId = (
  id: number,
  params?: GetFeatureFlagsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal
) => {
  return API<FeatureFlagResponse>(
    { url: `/feature-flags/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetFeatureFlagsIdQueryKey = (id: number, params?: GetFeatureFlagsIdParams) => {
  return [`/feature-flags/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetFeatureFlagsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getFeatureFlagsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetFeatureFlagsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFeatureFlagsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFeatureFlagsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFeatureFlagsId>>> = ({ signal }) =>
    getFeatureFlagsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFeatureFlagsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFeatureFlagsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFeatureFlagsId>>
>;
export type GetFeatureFlagsIdQueryError = ErrorType<Error>;

export const useGetFeatureFlagsId = <
  TData = Awaited<ReturnType<typeof getFeatureFlagsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetFeatureFlagsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFeatureFlagsId>>, TError, TData>;
    request?: SecondParameter<typeof API>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFeatureFlagsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putFeatureFlagsId = (
  id: number,
  featureFlagRequest: BodyType<FeatureFlagRequest>,
  options?: SecondParameter<typeof API>
) => {
  return API<FeatureFlagResponse>(
    {
      url: `/feature-flags/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: featureFlagRequest,
    },
    options
  );
};

export const getPutFeatureFlagsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putFeatureFlagsId>>,
    TError,
    { id: number; data: BodyType<FeatureFlagRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putFeatureFlagsId>>,
  TError,
  { id: number; data: BodyType<FeatureFlagRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putFeatureFlagsId>>,
    { id: number; data: BodyType<FeatureFlagRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putFeatureFlagsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutFeatureFlagsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putFeatureFlagsId>>
>;
export type PutFeatureFlagsIdMutationBody = BodyType<FeatureFlagRequest>;
export type PutFeatureFlagsIdMutationError = ErrorType<Error>;

export const usePutFeatureFlagsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putFeatureFlagsId>>,
    TError,
    { id: number; data: BodyType<FeatureFlagRequest> },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getPutFeatureFlagsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteFeatureFlagsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/feature-flags/${id}`, method: 'delete' }, options);
};

export const getDeleteFeatureFlagsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFeatureFlagsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFeatureFlagsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFeatureFlagsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteFeatureFlagsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFeatureFlagsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFeatureFlagsId>>
>;

export type DeleteFeatureFlagsIdMutationError = ErrorType<Error>;

export const useDeleteFeatureFlagsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFeatureFlagsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const mutationOptions = getDeleteFeatureFlagsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
